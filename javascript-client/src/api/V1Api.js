/**
 * Sensor Community API
 * This is the API for the Sensor Community. There are two domains where the same data is served.  https://api.luftdaten.info - This is optimized for receiving data. DON'T use this to request data.  https://data.sensor.community - This is faster and more reliable for serving data, so should be used for reporting cases. Where it is not supported for a certain endpoint, the previous domain must be used.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* V1 service.
* @module api/V1Api
* @version 0.1.0
*/
export default class V1Api {

    /**
    * Constructs a new V1Api. 
    * @alias module:api/V1Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getDataByApiID operation.
     * @callback module:api/V1Api~getDataByApiIDCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * All measurements of the last 5 minutes for one sensor
     * All measurements of the last 5 minutes for one sensor. (NOT chipID. API-ID can be found by clicking on your sensor on the Map).
     * @param {Number} apiID 
     * @param {module:api/V1Api~getDataByApiIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getDataByApiID(apiID, callback) {
      let postBody = null;
      // verify the required parameter 'apiID' is set
      if (apiID === undefined || apiID === null) {
        throw new Error("Missing the required parameter 'apiID' when calling getDataByApiID");
      }

      let pathParams = {
        'apiID': apiID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/airrohr/v1/sensor/{apiID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataLast5Minutes operation.
     * @callback module:api/V1Api~getDataLast5MinutesCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Average of all measurements per sensor of the last 5 minutes for all.
     * Average of all measurements per sensor of the last 5 minutes for all. Be careful (large response)! Do not use this in the OpenAPI UI!
     * @param {module:api/V1Api~getDataLast5MinutesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getDataLast5Minutes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/static/v1/data.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSensorValuesWithFilter operation.
     * @callback module:api/V1Api~getSensorValuesWithFilterCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * All measurements of the last 5 minutes filtered by query.
     * All measurements of the last 5 minutes filtered by query.
     * @param {String} query 
     * @param {module:api/V1Api~getSensorValuesWithFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getSensorValuesWithFilter(query, callback) {
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling getSensorValuesWithFilter");
      }

      let pathParams = {
        'query': query
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/airrohr/v1/filter/{query}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
