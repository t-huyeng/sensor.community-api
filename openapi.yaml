openapi: "3.0.0"
info:
  title: Sensor Community API
  version: 0.1.0
  description:
    This is the API for the Sensor Community. There are two domains where the same data is served.


    https://api.luftdaten.info - This is optimized for receiving data. DON'T use this to request data.


    https://data.sensor.community - This is faster and more reliable for serving data, so should be used for reporting cases. Where it is not supported for a certain endpoint, the previous domain must be used.
  contact:
    url: "https://github.com/opendata-stuttgart/meta/wiki/EN-APIs"

servers:
  - url: "https://data.sensor.community"

tags:
  - name: V1
  - name: V2

paths:
  /static/v1/data.json:
    get:
      operationId: getDataLast5Minutes
      tags:
        - V1
      summary: average of all measurements per sensor of the last 5 minutes for all.
      description: average of all measurements per sensor of the last 5 minutes for all. Be careful (large response)!
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Result"

  /airrohr/v1/filter/{query}:
    get:
      operationId: getSensorValuesWithFilter
      tags:
        - V1
      summary: all measurements of the last 5 minutes filtered by query.
      description: all measurements of the last 5 minutes filtered by query.
      # https://data.sensor.community/airrohr/v1/filter/country=DE&area=52.5200,13.4050,1&type=SDS011
      # Combinations are possible
      # type={sensor type} : comma-separated list of sensor types, e.g. SDS011,BME280
      # area={lat,lon,distance} : all sensors within a max radius e.g. 52.5200,13.4050,10 (Berlin)
      # box={lat1,lon1,lat2,lon2} : all sensors in a 'box' with the given coordinates e.g. 52.1,13.0,53.5,13.5
      # country={country code} : comma-separated list of country codes. Example BE,DE,NL
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Result"
      parameters:
        - in: path
          required: true
          name: query
          schema:
            type: string
          example: country=DE

  /airrohr/v1/sensor/{apiID}/:
    get:
      operationId: getDataByApiID
      tags:
        - V1
      summary: all measurements of the last 5 minutes for one sensor
      description: all measurements of the last 5 minutes for one sensor. (NOT chipID. API-ID can be found by clicking on your sensor on the Map).
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Result"
      parameters:
        - in: path
          required: true
          name: apiID
          schema:
            type: integer
          example: 37987

  /static/v2/data.json:
    get:
      operationId: getDataLast5MinutesV2
      tags:
        - V2
      summary: average of all measurements per sensor of the last 5 minutes for all.
      description: average of all measurements per sensor of the last 5 minutes for all. Be careful (large response)!
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Result"
  /static/v2/data.1h.json:
    get:
      operationId: getDataLast1Hour
      tags:
        - V2
      summary: average of all measurements per sensor of the last hour.
      description: average of all measurements per sensor of the last hour. Be careful (large response)!
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Result"
  /static/v2/data.24h.json:
    get:
      operationId: getDataLast24Hour
      tags:
        - V2
      summary: average of all measurements per sensor of the 24 hours.
      description: average of all measurements per sensor of the 24 hours. Be careful (large response)!
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Result"

  /static/v2/data.dust.min.json:
    get:
      operationId: getDustDataLast5Minutes
      tags:
        - V2
      servers:
        - url: https://api.luftdaten.info/
      summary: average of all measurements per sensor of the last 5 minutes for all dust sensors only.
      description: average of all measurements per sensor of the last 5 minutes for all dust sensors only. Be careful (large response)!
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Result"
  /static/v2/data.temp.min.json:
    get:
      operationId: getTempHumAirDataLast5Minutes
      tags:
        - V2
      servers:
        - url: https://api.luftdaten.info/
      summary: average of all measurements per sensor of the last 5 minutes for all temp./humidity/air pressure sensors only.
      description: average of all measurements per sensor of the last 5 minutes for all temp./humidity/air pressure sensors only. Be careful (large response)!
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Result"

components:
    schemas:
      Result:
        type: string
